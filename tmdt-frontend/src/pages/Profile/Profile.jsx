import { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { setLoading } from '../../store/features/common';
import { setAuthenticated } from "../../store/features/authSlice";
import { addAddressAPI, fetchUserDetails } from '../../api/UserInfo.js';
import { loadUserInfo, saveAddress, selectUserInfo, selectIsUserAdmin } from '../../store/features/user.js';

import { Link } from "react-router-dom";
import { getToken } from "../../utils/jwt-helper.js";

const ProfilePage = () => {
    const user = useSelector(selectUserInfo);
    const dispatch = useDispatch();
    const isUserAdmin = useSelector(selectIsUserAdmin);
    const [isEditing, setIsEditing] = useState(false);
    const [newAddress, setNewAddress] = useState({
        street: '',
        city: '',
        state: '',
        zipCode: '',
        phoneNumber: ''
    });

    useEffect(() => {
        const loadData = async () => {
            dispatch(setLoading(true));
            try {
                const data = await fetchUserDetails();
                dispatch(loadUserInfo(data));
                dispatch(setAuthenticated(true));
            } catch (err) {
                console.error("L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", err);
            } finally {
                dispatch(setLoading(false));
            }
        };
        loadData();
    }, [dispatch]);

    const handleAddAddress = async () => {
        const { street, city, state, phoneNumber } = newAddress;
        if (!street || !city || !state || !phoneNumber) {
            alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ƒë·ªãa ch·ªâ, th√†nh ph·ªë, t·ªânh v√† s·ªë ƒëi·ªán tho·∫°i");
            return;
        }

        try {
            const added = await addAddressAPI(newAddress);
            dispatch(saveAddress(added));
            alert("ƒê√£ l∆∞u ƒë·ªãa ch·ªâ th√†nh c√¥ng");
            setNewAddress({ street: '', city: '', state: '', zipCode: '', phoneNumber: '' });
            setIsEditing(false);
        } catch (err) {
            console.error(err);
            alert("C√≥ l·ªói x·∫£y ra khi l∆∞u ƒë·ªãa ch·ªâ");
        }
    };

    const handleRedeem = async (requiredPoints) => {
        try {
            const token = getToken();

            const res = await fetch(`http://localhost:8080/api/vouchers/redeem?points=${requiredPoints}`, {
                method: "POST",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            });

            const text = await res.text();

            if (res.ok) {
                const data = JSON.parse(text);
                alert(`üéâ ƒê·ªïi th√†nh c√¥ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c voucher ${data.discountPercentage}% - M√£: ${data.code}`);
                window.location.reload();
            } else {
                alert(text); // v√≠ d·ª•: "B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÉm ƒë·ªÉ ƒë·ªïi voucher n√†y."
            }
        } catch (err) {
            console.error("L·ªói khi g·ªçi API ƒë·ªïi ƒëi·ªÉm:", err);
            alert("ƒê√£ x·∫£y ra l·ªói khi g·ªçi API ƒë·ªïi ƒëi·ªÉm.");
        }
    };


    const latestAddress = user?.addressList?.[user.addressList.length - 1] ?? null;
    const hasAvatar = Boolean(user?.avatarUrl);

    return (
        <div className="max-w-4xl mx-auto mt-12 p-8 bg-white rounded-3xl shadow-lg font-sans min-h-[550px] mb-12">

            {/* Link admin n·∫øu admin */}
            {isUserAdmin && (
                <div className="text-right mb-6">
                    <Link to="/admin" className="text-blue-700 underline font-medium hover:text-blue-900">
                        Qu·∫£n l√Ω Admin
                    </Link>
                </div>
            )}

            <div className="flex flex-col lg:flex-row gap-10 items-center lg:items-start">
                {/* Avatar */}
                {hasAvatar && (
                    <div className="flex-shrink-0">
                        <img
                            src={user.avatarUrl}
                            alt="Avatar"
                            className="rounded-full w-32 h-32 border-4 border-blue-500 shadow-md object-cover"
                        />
                    </div>
                )}

                {/* Th√¥ng tin c√° nh√¢n */}
                <div className="flex-1">
                    <h2 className="text-3xl font-bold text-blue-800 mb-8 border-b pb-3">
                        Th√¥ng Tin C√° Nh√¢n
                    </h2>

                    {user && user.email ? (
                        <div className="space-y-6 text-gray-800 text-base">
                            <div className="flex justify-between">
                                <span className="font-semibold w-1/3">H·ªç t√™n:</span>
                                <span
                                    className="flex-1 text-right">{(user.lastName ?? '') + ' ' + (user.firstName ?? '') || 'Ch∆∞a c·∫≠p nh·∫≠t'}</span>
                            </div>

                            <div className="flex justify-between">
                                <span className="font-semibold w-1/3">Email:</span>
                                <span className="flex-1 text-right break-words">{user.email}</span>
                            </div>

                            <div className="flex justify-between">
                                <span className="font-semibold w-1/3">S·ªë ƒëi·ªán tho·∫°i:</span>
                                {user.phoneNumber ? (
                                    <span className="flex-1 text-right">{user.phoneNumber}</span>
                                ) : (
                                    <span className="flex-1 text-right text-gray-400 italic">Ch∆∞a c·∫≠p nh·∫≠t</span>
                                )}
                            </div>

                            {/* ƒê·ªãa ch·ªâ */}
                            <div>
                                <div className="flex justify-between items-center mb-2">
                                    <span className="font-semibold">ƒê·ªãa ch·ªâ:</span>
                                    <button
                                        onClick={() => setIsEditing(!isEditing)}
                                        className="text-blue-600 hover:underline text-sm"
                                    >
                                        {isEditing ? 'H·ªßy' : 'Ch·ªânh s·ª≠a / Th√™m'}
                                    </button>
                                </div>

                                {isEditing ? (
                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                        <input
                                            type="text"
                                            placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng"
                                            className="border rounded px-3 py-2"
                                            value={newAddress.street}
                                            onChange={(e) => setNewAddress({...newAddress, street: e.target.value})}
                                        />
                                        <input
                                            type="text"
                                            placeholder="Th√†nh ph·ªë"
                                            className="border rounded px-3 py-2"
                                            value={newAddress.city}
                                            onChange={(e) => setNewAddress({...newAddress, city: e.target.value})}
                                        />
                                        <input
                                            type="text"
                                            placeholder="Qu·ªëc gia"
                                            className="border rounded px-3 py-2"
                                            value={newAddress.state}
                                            onChange={(e) => setNewAddress({...newAddress, state: e.target.value})}
                                        />
                                        <input
                                            type="text"
                                            placeholder="S·ªë ƒëi·ªán tho·∫°i"
                                            className="border rounded px-3 py-2"
                                            value={newAddress.phoneNumber}
                                            onChange={(e) => setNewAddress({
                                                ...newAddress,
                                                phoneNumber: e.target.value
                                            })}
                                        />
                                        <button
                                            className="col-span-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition"
                                            onClick={handleAddAddress}
                                        >
                                            L∆∞u ƒë·ªãa ch·ªâ
                                        </button>
                                    </div>
                                ) : latestAddress ? (
                                    <p className="text-gray-700 ml-4">{latestAddress.street}, {latestAddress.city}, {latestAddress.state}</p>
                                ) : (
                                    <p className="text-gray-400 italic ml-4">Ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o</p>
                                )}
                            </div>

                            <div className="flex justify-between">
                                <span className="font-semibold w-1/3">ƒêi·ªÉm th∆∞·ªüng:</span>
                                <span
                                    className="flex-1 text-right text-blue-600 font-bold">{user?.points ?? 0} ƒëi·ªÉm</span>
                            </div>

                            {/* Voucher ƒë·ªïi ƒëi·ªÉm */}
                            {user?.points >= 500 && (
                                <div className="space-y-3 pt-4 border-t">
                                    <p className="text-gray-600 text-sm">B·∫°n c√≥ th·ªÉ ƒë·ªïi ƒëi·ªÉm ƒë·ªÉ nh·∫≠n voucher:</p>
                                    <div className="flex flex-wrap gap-4">
                                        <button
                                            onClick={() => handleRedeem(500)}
                                            disabled={user.points < 500}
                                            className="bg-green-500 text-white py-2 px-4 rounded hover:bg-green-600 disabled:opacity-50 transition"
                                        >
                                            ƒê·ªïi 500 ƒëi·ªÉm l·∫•y voucher 10%
                                        </button>
                                        <button
                                            onClick={() => handleRedeem(1000)}
                                            disabled={user.points < 1000}
                                            className="bg-purple-500 text-white py-2 px-4 rounded hover:bg-purple-600 disabled:opacity-50 transition"
                                        >
                                            ƒê·ªïi 1000 ƒëi·ªÉm l·∫•y voucher 20%
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    ) : (
                        <p className="text-center text-gray-500 mt-8">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
                    )}
                </div>
            </div>

            <div className="mt-10 text-right">
                <Link
                    to="/change-password"
                    className="inline-block px-6 py-2 bg-yellow-500 text-white font-semibold rounded-lg shadow hover:bg-yellow-600 transition"
                >
                    ƒê·ªïi m·∫≠t kh·∫©u
                </Link>
            </div>
        </div>

    );
};

export default ProfilePage;
